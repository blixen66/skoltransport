{"ast":null,"code":"import{useState,useCallback,useEffect}from'react';const API_KEY='AIzaSyA94zp7rvXJarol8tn4eMPSy7yFvHIXeLg';export const useGoogleMaps=()=>{const[isLoaded,setIsLoaded]=useState(false);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);useEffect(()=>{const loadGoogleMaps=()=>{if(window.google&&window.google.maps){setIsLoaded(true);return;}// Ta bort befintliga Google Maps scripts\nconst existingScripts=document.querySelectorAll('script[src*=\"maps.googleapis.com\"]');existingScripts.forEach(script=>script.remove());const script=document.createElement('script');script.src=\"https://maps.googleapis.com/maps/api/js?key=\".concat(API_KEY,\"&libraries=places&callback=initGoogleMaps\");script.async=true;script.defer=true;// Skapa global callback funktion\nwindow.initGoogleMaps=()=>{if(window.google&&window.google.maps){setIsLoaded(true);setError(null);}else{setError('Google Maps API laddades inte korrekt');}};script.onerror=()=>{setError('Kunde inte ladda Google Maps API');setIsLoaded(false);};document.head.appendChild(script);};loadGoogleMaps();},[]);const geocodeAddress=useCallback(address=>{return new Promise((resolve,reject)=>{if(!window.google||!window.google.maps){reject(new Error('Google Maps API inte laddad'));return;}try{const geocoder=new window.google.maps.Geocoder();geocoder.geocode({address},(results,status)=>{if(status==='OK'&&results&&results[0]){const location=results[0].geometry.location;resolve({lat:location.lat(),lng:location.lng()});}else{reject(new Error(\"Geocoding misslyckades: \".concat(status)));}});}catch(error){reject(new Error(\"Geocoding fel: \".concat(error)));}});},[]);const getDistanceMatrix=useCallback(async coordinates=>{return new Promise((resolve,reject)=>{if(!window.google||!window.google.maps){reject(new Error('Google Maps API inte laddad'));return;}try{const service=new window.google.maps.DistanceMatrixService();const origins=coordinates.map(coord=>new window.google.maps.LatLng(coord.lat,coord.lng));const destinations=[...origins];service.getDistanceMatrix({origins,destinations,travelMode:window.google.maps.TravelMode.DRIVING,unitSystem:window.google.maps.UnitSystem.METRIC,avoidHighways:false,avoidTolls:false},(response,status)=>{if(status==='OK'&&response&&response.rows){const matrix=response.rows.map(row=>row.elements.map(element=>element.distance.value));resolve(matrix);}else{reject(new Error(\"Distance Matrix misslyckades: \".concat(status)));}});}catch(error){reject(new Error(\"Distance Matrix fel: \".concat(error)));}});},[]);const solveTSP=useCallback(distanceMatrix=>{const n=distanceMatrix.length;if(n<=1)return[0];// Nearest Neighbor heuristik\nconst visited=new Array(n).fill(false);const path=[0];visited[0]=true;for(let i=1;i<n;i++){let nearest=-1;let minDistance=Infinity;for(let j=0;j<n;j++){if(!visited[j]){const distance=distanceMatrix[path[path.length-1]][j];if(distance<minDistance){minDistance=distance;nearest=j;}}}if(nearest!==-1){path.push(nearest);visited[nearest]=true;}}return path;},[]);const optimizeRoute=useCallback(async addresses=>{if(addresses.length<2){return{addresses,isOptimized:false};}setLoading(true);setError(null);try{// Geokoda alla adresser\nconst coordinates=await Promise.all(addresses.map(address=>geocodeAddress(address)));// Hämta avståndsmatris\nconst distanceMatrix=await getDistanceMatrix(coordinates);// Lös TSP\nconst optimalOrder=solveTSP(distanceMatrix);// Sortera adresser enligt optimal ordning\nconst optimizedAddresses=optimalOrder.map(index=>addresses[index]);// Beräkna totalt avstånd\nlet totalDistance=0;for(let i=0;i<optimalOrder.length-1;i++){totalDistance+=distanceMatrix[optimalOrder[i]][optimalOrder[i+1]];}setLoading(false);return{addresses:optimizedAddresses,totalDistance,isOptimized:true};}catch(err){setLoading(false);const errorMessage=err instanceof Error?err.message:'Okänt fel vid optimering';setError(errorMessage);throw new Error(errorMessage);}},[geocodeAddress,getDistanceMatrix,solveTSP]);const generateGoogleMapsUrl=useCallback(addresses=>{if(addresses.length===0)return'';const encodedAddresses=addresses.map(addr=>encodeURIComponent(addr));return\"https://www.google.com/maps/dir/\".concat(encodedAddresses.join('/'));},[]);return{isLoaded,loading,error,optimizeRoute,generateGoogleMapsUrl};};","map":{"version":3,"names":["useState","useCallback","useEffect","API_KEY","useGoogleMaps","isLoaded","setIsLoaded","loading","setLoading","error","setError","loadGoogleMaps","window","google","maps","existingScripts","document","querySelectorAll","forEach","script","remove","createElement","src","concat","async","defer","initGoogleMaps","onerror","head","appendChild","geocodeAddress","address","Promise","resolve","reject","Error","geocoder","Geocoder","geocode","results","status","location","geometry","lat","lng","getDistanceMatrix","coordinates","service","DistanceMatrixService","origins","map","coord","LatLng","destinations","travelMode","TravelMode","DRIVING","unitSystem","UnitSystem","METRIC","avoidHighways","avoidTolls","response","rows","matrix","row","elements","element","distance","value","solveTSP","distanceMatrix","n","length","visited","Array","fill","path","i","nearest","minDistance","Infinity","j","push","optimizeRoute","addresses","isOptimized","all","optimalOrder","optimizedAddresses","index","totalDistance","err","errorMessage","message","generateGoogleMapsUrl","encodedAddresses","addr","encodeURIComponent","join"],"sources":["/home/blixen66/Hämtningar/skoltransporter/src/hooks/useGoogleMaps.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { Address, OptimizationResult } from '../types';\n\ndeclare global {\n  interface Window {\n    google: any;\n    initGoogleMaps: () => void;\n  }\n}\n\nconst API_KEY = 'AIzaSyA94zp7rvXJarol8tn4eMPSy7yFvHIXeLg';\n\nexport const useGoogleMaps = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadGoogleMaps = () => {\n      if (window.google && window.google.maps) {\n        setIsLoaded(true);\n        return;\n      }\n\n      // Ta bort befintliga Google Maps scripts\n      const existingScripts = document.querySelectorAll('script[src*=\"maps.googleapis.com\"]');\n      existingScripts.forEach(script => script.remove());\n\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&libraries=places&callback=initGoogleMaps`;\n      script.async = true;\n      script.defer = true;\n      \n      // Skapa global callback funktion\n      window.initGoogleMaps = () => {\n        if (window.google && window.google.maps) {\n          setIsLoaded(true);\n          setError(null);\n        } else {\n          setError('Google Maps API laddades inte korrekt');\n        }\n      };\n      \n      script.onerror = () => {\n        setError('Kunde inte ladda Google Maps API');\n        setIsLoaded(false);\n      };\n\n      document.head.appendChild(script);\n    };\n\n    loadGoogleMaps();\n  }, []);\n\n  const geocodeAddress = useCallback((address: string): Promise<{ lat: number; lng: number }> => {\n    return new Promise((resolve, reject) => {\n      if (!window.google || !window.google.maps) {\n        reject(new Error('Google Maps API inte laddad'));\n        return;\n      }\n\n      try {\n        const geocoder = new window.google.maps.Geocoder();\n        geocoder.geocode({ address }, (results: any, status: any) => {\n          if (status === 'OK' && results && results[0]) {\n            const location = results[0].geometry.location;\n            resolve({\n              lat: location.lat(),\n              lng: location.lng(),\n            });\n          } else {\n            reject(new Error(`Geocoding misslyckades: ${status}`));\n          }\n        });\n      } catch (error) {\n        reject(new Error(`Geocoding fel: ${error}`));\n      }\n    });\n  }, []);\n\n  const getDistanceMatrix = useCallback(async (coordinates: { lat: number; lng: number }[]): Promise<number[][]> => {\n    return new Promise((resolve, reject) => {\n      if (!window.google || !window.google.maps) {\n        reject(new Error('Google Maps API inte laddad'));\n        return;\n      }\n\n      try {\n        const service = new window.google.maps.DistanceMatrixService();\n        const origins = coordinates.map(coord => new window.google.maps.LatLng(coord.lat, coord.lng));\n        const destinations = [...origins];\n\n        service.getDistanceMatrix({\n          origins,\n          destinations,\n          travelMode: window.google.maps.TravelMode.DRIVING,\n          unitSystem: window.google.maps.UnitSystem.METRIC,\n          avoidHighways: false,\n          avoidTolls: false,\n        }, (response: any, status: any) => {\n          if (status === 'OK' && response && response.rows) {\n            const matrix = response.rows.map((row: any) =>\n              row.elements.map((element: any) => element.distance.value)\n            );\n            resolve(matrix);\n          } else {\n            reject(new Error(`Distance Matrix misslyckades: ${status}`));\n          }\n        });\n      } catch (error) {\n        reject(new Error(`Distance Matrix fel: ${error}`));\n      }\n    });\n  }, []);\n\n  const solveTSP = useCallback((distanceMatrix: number[][]): number[] => {\n    const n = distanceMatrix.length;\n    if (n <= 1) return [0];\n\n    // Nearest Neighbor heuristik\n    const visited = new Array(n).fill(false);\n    const path = [0];\n    visited[0] = true;\n\n    for (let i = 1; i < n; i++) {\n      let nearest = -1;\n      let minDistance = Infinity;\n\n      for (let j = 0; j < n; j++) {\n        if (!visited[j]) {\n          const distance = distanceMatrix[path[path.length - 1]][j];\n          if (distance < minDistance) {\n            minDistance = distance;\n            nearest = j;\n          }\n        }\n      }\n\n      if (nearest !== -1) {\n        path.push(nearest);\n        visited[nearest] = true;\n      }\n    }\n\n    return path;\n  }, []);\n\n  const optimizeRoute = useCallback(async (addresses: string[]): Promise<OptimizationResult> => {\n    if (addresses.length < 2) {\n      return {\n        addresses,\n        isOptimized: false,\n      };\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Geokoda alla adresser\n      const coordinates = await Promise.all(\n        addresses.map(address => geocodeAddress(address))\n      );\n\n      // Hämta avståndsmatris\n      const distanceMatrix = await getDistanceMatrix(coordinates);\n\n      // Lös TSP\n      const optimalOrder = solveTSP(distanceMatrix);\n\n      // Sortera adresser enligt optimal ordning\n      const optimizedAddresses = optimalOrder.map(index => addresses[index]);\n\n      // Beräkna totalt avstånd\n      let totalDistance = 0;\n      for (let i = 0; i < optimalOrder.length - 1; i++) {\n        totalDistance += distanceMatrix[optimalOrder[i]][optimalOrder[i + 1]];\n      }\n\n      setLoading(false);\n\n      return {\n        addresses: optimizedAddresses,\n        totalDistance,\n        isOptimized: true,\n      };\n    } catch (err) {\n      setLoading(false);\n      const errorMessage = err instanceof Error ? err.message : 'Okänt fel vid optimering';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }, [geocodeAddress, getDistanceMatrix, solveTSP]);\n\n  const generateGoogleMapsUrl = useCallback((addresses: string[]): string => {\n    if (addresses.length === 0) return '';\n    \n    const encodedAddresses = addresses.map(addr => encodeURIComponent(addr));\n    return `https://www.google.com/maps/dir/${encodedAddresses.join('/')}`;\n  }, []);\n\n  return {\n    isLoaded,\n    loading,\n    error,\n    optimizeRoute,\n    generateGoogleMapsUrl,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}