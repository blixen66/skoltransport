{"ast":null,"code":"import{useState,useCallback}from'react';export const useAddresses=()=>{const[addresses,setAddresses]=useState([]);const[isOptimized,setIsOptimized]=useState(false);const addAddress=useCallback(text=>{if(!text.trim())return;const newAddress={id:Date.now().toString(),text:text.trim()};setAddresses(prev=>[...prev,newAddress]);setIsOptimized(false);},[]);const removeAddress=useCallback(id=>{setAddresses(prev=>prev.filter(addr=>addr.id!==id));setIsOptimized(false);},[]);const clearAllAddresses=useCallback(()=>{setAddresses([]);setIsOptimized(false);},[]);const moveAddress=useCallback((fromIndex,toIndex)=>{if(fromIndex===toIndex)return;setAddresses(prev=>{const newAddresses=[...prev];const[movedAddress]=newAddresses.splice(fromIndex,1);newAddresses.splice(toIndex,0,movedAddress);return newAddresses;});setIsOptimized(false);},[]);const setOptimizedAddresses=useCallback(optimizedAddresses=>{setAddresses(prev=>{const newAddresses=optimizedAddresses.map((text,index)=>{var _prev$index,_prev$index2;return{id:((_prev$index=prev[index])===null||_prev$index===void 0?void 0:_prev$index.id)||Date.now().toString()+index,text,coordinates:(_prev$index2=prev[index])===null||_prev$index2===void 0?void 0:_prev$index2.coordinates};});return newAddresses;});setIsOptimized(true);},[]);const loadAddresses=useCallback(addressTexts=>{const newAddresses=addressTexts.map((text,index)=>({id:Date.now().toString()+index,text}));setAddresses(newAddresses);setIsOptimized(false);},[]);return{addresses,isOptimized,addAddress,removeAddress,clearAllAddresses,moveAddress,setOptimizedAddresses,loadAddresses};};","map":{"version":3,"names":["useState","useCallback","useAddresses","addresses","setAddresses","isOptimized","setIsOptimized","addAddress","text","trim","newAddress","id","Date","now","toString","prev","removeAddress","filter","addr","clearAllAddresses","moveAddress","fromIndex","toIndex","newAddresses","movedAddress","splice","setOptimizedAddresses","optimizedAddresses","map","index","_prev$index","_prev$index2","coordinates","loadAddresses","addressTexts"],"sources":["/home/blixen66/HÃ¤mtningar/skoltransporter/src/hooks/useAddresses.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { Address } from '../types';\n\nexport const useAddresses = () => {\n  const [addresses, setAddresses] = useState<Address[]>([]);\n  const [isOptimized, setIsOptimized] = useState(false);\n\n  const addAddress = useCallback((text: string) => {\n    if (!text.trim()) return;\n    \n    const newAddress: Address = {\n      id: Date.now().toString(),\n      text: text.trim(),\n    };\n    \n    setAddresses(prev => [...prev, newAddress]);\n    setIsOptimized(false);\n  }, []);\n\n  const removeAddress = useCallback((id: string) => {\n    setAddresses(prev => prev.filter(addr => addr.id !== id));\n    setIsOptimized(false);\n  }, []);\n\n  const clearAllAddresses = useCallback(() => {\n    setAddresses([]);\n    setIsOptimized(false);\n  }, []);\n\n  const moveAddress = useCallback((fromIndex: number, toIndex: number) => {\n    if (fromIndex === toIndex) return;\n    \n    setAddresses(prev => {\n      const newAddresses = [...prev];\n      const [movedAddress] = newAddresses.splice(fromIndex, 1);\n      newAddresses.splice(toIndex, 0, movedAddress);\n      return newAddresses;\n    });\n    \n    setIsOptimized(false);\n  }, []);\n\n  const setOptimizedAddresses = useCallback((optimizedAddresses: string[]) => {\n    setAddresses(prev => {\n      const newAddresses = optimizedAddresses.map((text, index) => ({\n        id: prev[index]?.id || Date.now().toString() + index,\n        text,\n        coordinates: prev[index]?.coordinates,\n      }));\n      return newAddresses;\n    });\n    setIsOptimized(true);\n  }, []);\n\n  const loadAddresses = useCallback((addressTexts: string[]) => {\n    const newAddresses = addressTexts.map((text, index) => ({\n      id: Date.now().toString() + index,\n      text,\n    }));\n    setAddresses(newAddresses);\n    setIsOptimized(false);\n  }, []);\n\n  return {\n    addresses,\n    isOptimized,\n    addAddress,\n    removeAddress,\n    clearAllAddresses,\n    moveAddress,\n    setOptimizedAddresses,\n    loadAddresses,\n  };\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}