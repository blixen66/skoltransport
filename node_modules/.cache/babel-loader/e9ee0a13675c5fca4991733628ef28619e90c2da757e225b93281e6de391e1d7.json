{"ast":null,"code":"import{useState,useCallback,useEffect}from'react';const API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'';export const useSavedRoutes=()=>{const[savedRoutes,setSavedRoutes]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const getWorkingAPIUrl=useCallback(async()=>{const urls=[\"\".concat(API_BASE_URL,\"/database.php\"),'http://localhost:8080/database.php','/database.php'];for(const url of urls){try{console.log('🧪 Testar URL:',url);const response=await fetch(\"\".concat(url,\"?action=load\"));if(response.ok){console.log('✅ Fungerande URL hittad:',url);return url.replace('/database.php','');}}catch(error){console.log('❌ URL fungerar inte:',url,error);}}throw new Error('Ingen fungerande API-URL hittades');},[]);const loadSavedRoutes=useCallback(async()=>{setLoading(true);setError(null);try{const baseUrl=await getWorkingAPIUrl();const response=await fetch(\"\".concat(baseUrl,\"/database.php?action=load\"));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();setSavedRoutes(data);}catch(err){const errorMessage=err instanceof Error?err.message:'Okänt fel';setError(errorMessage);console.error('Fel vid laddning av rutter:',err);}finally{setLoading(false);}},[getWorkingAPIUrl]);const saveRoute=useCallback(async(name,addresses)=>{if(!name.trim()){throw new Error('Ruttnamn krävs');}if(addresses.length===0){throw new Error('Minst en adress krävs');}try{const baseUrl=await getWorkingAPIUrl();const response=await fetch(\"\".concat(baseUrl,\"/database.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({action:'save',name:name.trim(),addresses:addresses})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();if(result.success){await loadSavedRoutes();// Ladda om listan\nreturn result;}else{throw new Error(result.message||'Fel vid sparande av rutt');}}catch(err){const errorMessage=err instanceof Error?err.message:'Okänt fel';throw new Error(errorMessage);}},[getWorkingAPIUrl,loadSavedRoutes]);const loadRoute=useCallback(async routeId=>{try{const baseUrl=await getWorkingAPIUrl();const response=await fetch(\"\".concat(baseUrl,\"/database.php?action=load_route&id=\").concat(routeId));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();return data;}catch(err){const errorMessage=err instanceof Error?err.message:'Okänt fel';throw new Error(errorMessage);}},[getWorkingAPIUrl]);const deleteRoute=useCallback(async(routeId,routeName)=>{if(!window.confirm(\"\\xC4r du s\\xE4ker p\\xE5 att du vill ta bort rutten \\\"\".concat(routeName,\"\\\"?\"))){return false;}try{const baseUrl=await getWorkingAPIUrl();const response=await fetch(\"\".concat(baseUrl,\"/database.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({action:'delete',id:routeId})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();if(result.success){await loadSavedRoutes();// Ladda om listan\nreturn true;}else{throw new Error(result.message||'Fel vid borttagning av rutt');}}catch(err){const errorMessage=err instanceof Error?err.message:'Okänt fel';throw new Error(errorMessage);}},[getWorkingAPIUrl,loadSavedRoutes]);// Ladda sparade rutter vid mount\nuseEffect(()=>{loadSavedRoutes();},[loadSavedRoutes]);return{savedRoutes,loading,error,loadSavedRoutes,saveRoute,loadRoute,deleteRoute};};","map":{"version":3,"names":["useState","useCallback","useEffect","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","useSavedRoutes","savedRoutes","setSavedRoutes","loading","setLoading","error","setError","getWorkingAPIUrl","urls","concat","url","console","log","response","fetch","ok","replace","Error","loadSavedRoutes","baseUrl","status","data","json","err","errorMessage","message","saveRoute","name","addresses","trim","length","method","headers","body","JSON","stringify","action","result","success","loadRoute","routeId","deleteRoute","routeName","window","confirm","id"],"sources":["/home/blixen66/Hämtningar/skoltransporter/src/hooks/useSavedRoutes.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { SavedRoute } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || '';\n\nexport const useSavedRoutes = () => {\n  const [savedRoutes, setSavedRoutes] = useState<SavedRoute[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const getWorkingAPIUrl = useCallback(async () => {\n    const urls = [\n      `${API_BASE_URL}/database.php`,\n      'http://localhost:8080/database.php',\n      '/database.php'\n    ];\n    \n    for (const url of urls) {\n      try {\n        console.log('🧪 Testar URL:', url);\n        const response = await fetch(`${url}?action=load`);\n        if (response.ok) {\n          console.log('✅ Fungerande URL hittad:', url);\n          return url.replace('/database.php', '');\n        }\n      } catch (error) {\n        console.log('❌ URL fungerar inte:', url, error);\n      }\n    }\n    \n    throw new Error('Ingen fungerande API-URL hittades');\n  }, []);\n\n  const loadSavedRoutes = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const baseUrl = await getWorkingAPIUrl();\n      const response = await fetch(`${baseUrl}/database.php?action=load`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setSavedRoutes(data);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Okänt fel';\n      setError(errorMessage);\n      console.error('Fel vid laddning av rutter:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [getWorkingAPIUrl]);\n\n  const saveRoute = useCallback(async (name: string, addresses: string[]) => {\n    if (!name.trim()) {\n      throw new Error('Ruttnamn krävs');\n    }\n    \n    if (addresses.length === 0) {\n      throw new Error('Minst en adress krävs');\n    }\n\n    try {\n      const baseUrl = await getWorkingAPIUrl();\n      const response = await fetch(`${baseUrl}/database.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'save',\n          name: name.trim(),\n          addresses: addresses,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      if (result.success) {\n        await loadSavedRoutes(); // Ladda om listan\n        return result;\n      } else {\n        throw new Error(result.message || 'Fel vid sparande av rutt');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Okänt fel';\n      throw new Error(errorMessage);\n    }\n  }, [getWorkingAPIUrl, loadSavedRoutes]);\n\n  const loadRoute = useCallback(async (routeId: number) => {\n    try {\n      const baseUrl = await getWorkingAPIUrl();\n      const response = await fetch(`${baseUrl}/database.php?action=load_route&id=${routeId}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Okänt fel';\n      throw new Error(errorMessage);\n    }\n  }, [getWorkingAPIUrl]);\n\n  const deleteRoute = useCallback(async (routeId: number, routeName: string) => {\n    if (!window.confirm(`Är du säker på att du vill ta bort rutten \"${routeName}\"?`)) {\n      return false;\n    }\n\n    try {\n      const baseUrl = await getWorkingAPIUrl();\n      const response = await fetch(`${baseUrl}/database.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'delete',\n          id: routeId,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      if (result.success) {\n        await loadSavedRoutes(); // Ladda om listan\n        return true;\n      } else {\n        throw new Error(result.message || 'Fel vid borttagning av rutt');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Okänt fel';\n      throw new Error(errorMessage);\n    }\n  }, [getWorkingAPIUrl, loadSavedRoutes]);\n\n  // Ladda sparade rutter vid mount\n  useEffect(() => {\n    loadSavedRoutes();\n  }, [loadSavedRoutes]);\n\n  return {\n    savedRoutes,\n    loading,\n    error,\n    loadSavedRoutes,\n    saveRoute,\n    loadRoute,\n    deleteRoute,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}