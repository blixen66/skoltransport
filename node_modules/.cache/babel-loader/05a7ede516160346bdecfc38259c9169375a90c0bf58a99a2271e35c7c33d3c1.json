{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useAddresses = () => {\n  _s();\n  const [addresses, setAddresses] = useState([]);\n  const [isOptimized, setIsOptimized] = useState(false);\n  const addAddress = useCallback(text => {\n    if (!text.trim()) return;\n    const newAddress = {\n      id: Date.now().toString(),\n      text: text.trim()\n    };\n    setAddresses(prev => [...prev, newAddress]);\n    setIsOptimized(false);\n  }, []);\n  const removeAddress = useCallback(id => {\n    setAddresses(prev => prev.filter(addr => addr.id !== id));\n    setIsOptimized(false);\n  }, []);\n  const clearAllAddresses = useCallback(() => {\n    setAddresses([]);\n    setIsOptimized(false);\n  }, []);\n  const moveAddress = useCallback((fromIndex, toIndex) => {\n    if (fromIndex === toIndex) return;\n    setAddresses(prev => {\n      const newAddresses = [...prev];\n      const [movedAddress] = newAddresses.splice(fromIndex, 1);\n      newAddresses.splice(toIndex, 0, movedAddress);\n      return newAddresses;\n    });\n    setIsOptimized(false);\n  }, []);\n  const setOptimizedAddresses = useCallback(optimizedAddresses => {\n    setAddresses(prev => {\n      const newAddresses = optimizedAddresses.map((text, index) => {\n        var _prev$index, _prev$index2;\n        return {\n          id: ((_prev$index = prev[index]) === null || _prev$index === void 0 ? void 0 : _prev$index.id) || Date.now().toString() + index,\n          text,\n          coordinates: (_prev$index2 = prev[index]) === null || _prev$index2 === void 0 ? void 0 : _prev$index2.coordinates\n        };\n      });\n      return newAddresses;\n    });\n    setIsOptimized(true);\n  }, []);\n  const loadAddresses = useCallback(addressTexts => {\n    const newAddresses = addressTexts.map((text, index) => ({\n      id: Date.now().toString() + index,\n      text\n    }));\n    setAddresses(newAddresses);\n    setIsOptimized(false);\n  }, []);\n  return {\n    addresses,\n    isOptimized,\n    addAddress,\n    removeAddress,\n    clearAllAddresses,\n    moveAddress,\n    setOptimizedAddresses,\n    loadAddresses\n  };\n};\n_s(useAddresses, \"7miaWR0YNo0FJ5V+brMvJZOrHtA=\");","map":{"version":3,"names":["useState","useCallback","useAddresses","_s","addresses","setAddresses","isOptimized","setIsOptimized","addAddress","text","trim","newAddress","id","Date","now","toString","prev","removeAddress","filter","addr","clearAllAddresses","moveAddress","fromIndex","toIndex","newAddresses","movedAddress","splice","setOptimizedAddresses","optimizedAddresses","map","index","_prev$index","_prev$index2","coordinates","loadAddresses","addressTexts"],"sources":["/home/blixen66/HÃ¤mtningar/skoltransporter/skoltransport/src/hooks/useAddresses.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { Address } from '../types';\n\nexport const useAddresses = () => {\n  const [addresses, setAddresses] = useState<Address[]>([]);\n  const [isOptimized, setIsOptimized] = useState(false);\n\n  const addAddress = useCallback((text: string) => {\n    if (!text.trim()) return;\n    \n    const newAddress: Address = {\n      id: Date.now().toString(),\n      text: text.trim(),\n    };\n    \n    setAddresses(prev => [...prev, newAddress]);\n    setIsOptimized(false);\n  }, []);\n\n  const removeAddress = useCallback((id: string) => {\n    setAddresses(prev => prev.filter(addr => addr.id !== id));\n    setIsOptimized(false);\n  }, []);\n\n  const clearAllAddresses = useCallback(() => {\n    setAddresses([]);\n    setIsOptimized(false);\n  }, []);\n\n  const moveAddress = useCallback((fromIndex: number, toIndex: number) => {\n    if (fromIndex === toIndex) return;\n    \n    setAddresses(prev => {\n      const newAddresses = [...prev];\n      const [movedAddress] = newAddresses.splice(fromIndex, 1);\n      newAddresses.splice(toIndex, 0, movedAddress);\n      return newAddresses;\n    });\n    \n    setIsOptimized(false);\n  }, []);\n\n  const setOptimizedAddresses = useCallback((optimizedAddresses: string[]) => {\n    setAddresses(prev => {\n      const newAddresses = optimizedAddresses.map((text, index) => ({\n        id: prev[index]?.id || Date.now().toString() + index,\n        text,\n        coordinates: prev[index]?.coordinates,\n      }));\n      return newAddresses;\n    });\n    setIsOptimized(true);\n  }, []);\n\n  const loadAddresses = useCallback((addressTexts: string[]) => {\n    const newAddresses = addressTexts.map((text, index) => ({\n      id: Date.now().toString() + index,\n      text,\n    }));\n    setAddresses(newAddresses);\n    setIsOptimized(false);\n  }, []);\n\n  return {\n    addresses,\n    isOptimized,\n    addAddress,\n    removeAddress,\n    clearAllAddresses,\n    moveAddress,\n    setOptimizedAddresses,\n    loadAddresses,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}